import com.github.jk1.license.render.*;
import com.github.jk1.license.filter.*;

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id "com.dorongold.task-tree" version "2.1.0"
    id "jacoco"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id "com.google.osdetector" version "1.7.0"
    id "kr.motd.sphinx" version "2.10.1"
    id "com.github.hierynomus.license" version"0.16.1"
    id "com.github.hierynomus.license-report" version"0.16.1"
    id 'com.github.jk1.dependency-license-report'
    id "com.github.johnrengelman.shadow" apply false
    id "io.github.lhotari.gradle-nar-plugin" apply false
    id 'com.palantir.docker' version '0.35.0' apply false
    id 'docker-compose' apply false
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://packages.confluent.io/maven/" }
        maven { url "https://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://repo.datastax.com/artifactory/datastax-public-releases-local" }
        maven {
            url "https://repo.datastax.com/artifactory/dse"
            if (project.hasProperty('dseRepoUsername') && project.hasProperty('dseRepoPassword')) {
                credentials() {
                    username "$dseRepoUsername"
                    password "$dseRepoPassword"
                }
            }
        }
        maven { url "${extraRepoUrl}" }
    }

    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.google.osdetector'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'com.github.jk1.dependency-license-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    }

    // use JUnit 5 platform
    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
        }
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs = [ '-parameters', '-Xlint:all', '-Xlint:-processing', '-Xlint:-serial', '-Werror']
    }

    compileTestJava {
        options.compilerArgs += '-parameters'
    }
}

subprojects {

    configurations {
        testAgent {
            transitive = false
        }
    }

    license {
        header rootProject.file('LICENSE-HEADER.txt')
        strictCheck true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes([ "**/cassandra.yaml",
                   "**/logback*",
                   '**/cassandra-source-version.properties',
                   '**/source-cassandra-*',
                   '**/command_factory.yml',
        ])
    }

    jacocoTestReport {
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
        testLogging {
            showStandardStreams = true
            // events = ["failed"]
        }
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                if (project.hasProperty('datastaxRepositoryUsername') && project.hasProperty('datastaxRepositoryPassword')) {
                    credentials() {
                        username "$datastaxRepositoryUsername"
                        password "$datastaxRepositoryPassword"
                    }
                }
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task printVersion {
    doLast {
        println project.version
    }
}


licenseReport {
    renderers = [new CsvReportRenderer(separator:';'), new TextReportRenderer(), new InventoryHtmlReportRenderer('index.html', 'CDC License Report')]
    filters = [new LicenseBundleNormalizer(bundlePath: rootProject.file('buildSrc/src/main/resources/license-normalizer-bundle.json'))]
    projects = [project] + project.subprojects
}
